{"version":3,"sources":["actions/index.js","components/CallendarCard.js","components/Callendar.js","components/InfoPanel.js","App.js","reportWebVitals.js","reducers/chosenDate.js","reducers/index.js","index.js"],"names":["setDate","value","type","payload","CallendarCard","day","month","year","events","dispatch","useSelector","state","chosenDate","useDispatch","class","tabindex","onClick","console","log","map","event","short_name","toUpperCase","id","Callendar","useState","setEvents","days","setDays","useEffect","initializeDays","getEvents","a","fetch","response","json","data","Array","i","getEventsForDay","specificEvents","forEach","date","slice","length","push","rows","reduce","r","element","index","rowContent","className","InfoEvent","setChosenEvent","name","InfoPanel","chosenEvent","API_URL","description","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dateReducer","action","allReducers","combineReducers","store","createStore","allReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAaA,EAAU,SAACC,GACpB,MAAO,CACHC,KAAM,MACNC,QAASF,ICyBFG,EAvBO,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAEhCC,GADaC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAC7BC,eAOjB,OACI,sBAAKC,MAAM,gBAAgBC,SAAS,IAAIC,QANf,WACzBC,QAAQC,IAAI,mBAAqBb,GACjCI,EAAST,EAAQ,GAAD,OAAIO,EAAJ,YAAYD,EAAZ,YAAqBD,MAIrC,UACI,qBAAKS,MAAM,cAAX,SACKN,EAAOW,KAAI,SAAAC,GAAK,OACb,4BACKA,EAAMC,WAAWC,eADdF,EAAMG,SAKtB,qBAAKT,MAAM,cAAX,SAA0BT,QCmEvBmB,G,MAnFG,WACd,IADoB,EAEQC,mBAAS,IAFjB,mBAEbjB,EAFa,KAELkB,EAFK,OAGID,mBAAS,IAHb,mBAGbE,EAHa,KAGPC,EAHO,OAIMH,mBAAS,IAJf,mBAIbnB,EAJa,KAKdG,GALc,KAKHI,eAEjBgB,qBAAU,WACNC,IACAC,IACAtB,EAAST,EAAQ,iBAClB,IAEH,IAAM+B,EAAS,uCAAG,8BAAAC,EAAA,sEACSC,MAbd,+DAYK,cACRC,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdV,EAAUU,GACVnB,QAAQC,IAAIkB,GAJE,2CAAH,qDAOTN,EAAiB,WAEnB,IADA,IAAIH,EAAO,IAAIU,MAAM,IACbC,EAAE,EAAGA,EAAE,GAAIA,IACfX,EAAKW,GAAKA,EAAE,EAEhBV,EAAQD,IAGNY,EAAkB,SAAClC,GACrB,IAAImC,EAAiB,GAMrB,OALAhC,EAAOiC,SAAQ,SAAArB,GACRA,EAAMsB,KAAKC,MAAMvB,EAAMsB,KAAKE,OAAO,EAAExB,EAAMsB,KAAKE,SAAWvC,GAC1DmC,EAAeK,KAAKzB,MAGrBoB,GAIPM,EAAOnB,EAAKR,KAAI,SAASd,GAEzB,OAAO,cAAC,EAAD,CAAyBA,IAAKA,EAAKC,MAAOA,EAAOC,KAAK,OAAOC,OAAQ+B,EAAgBlC,IAAjEA,MAC5B0C,QAAO,SAASC,EAAGC,EAASC,GAK3B,OAFAA,EAPY,IAOU,GAAKF,EAAEH,KAAK,IAClCG,EAAEA,EAAEJ,OAAS,GAAGC,KAAKI,GACdD,IACR,IAAI7B,KAAI,SAASgC,GAEhB,OAAO,qBAAKC,UAAU,gBAAf,SAAgCD,OAG3C,OACI,sBAAKC,UAAU,gBAAf,UAEI,sBAAKA,UAAU,kBAAf,UACI,wBAAQA,UAAU,gBAAlB,eACA,oBAAIA,UAAU,eAAd,sBACA,wBAAQA,UAAU,gBAAlB,kBAEJ,qBAAKA,UAAU,kBAAf,SACI,+BACA,mDACA,wCACA,4CACA,0CACA,6CACA,wCACA,gDAGJ,qBAAKA,UAAU,iBAAf,SACSN,SC1CfO,EAAY,SAAC,GAA6B,IAA5BjC,EAA2B,EAA3BA,MAAOkC,EAAoB,EAApBA,eACvB,OACI,qBAAKF,UAAU,aAAapC,QAAS,kBAAMsC,EAAelC,IAA1D,SACI,6CAAgBA,EAAMmC,WAKnBC,EAxCG,WAAO,IAAD,EACQ/B,mBAAS,IADjB,mBACbjB,EADa,KACLkB,EADK,OAEkBD,qBAFlB,mBAEbgC,EAFa,KAEAH,EAFA,KAGdZ,EAAOhC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cAClC8C,EAAO,mFAA+EhB,GAE5Fb,qBAAU,WACNE,MACD,CAACW,IAEJ,IAAMX,EAAS,uCAAG,8BAAAC,EAAA,sEACSC,MAAMyB,GADf,cACRxB,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdV,EAAUU,GACVkB,EAAelB,EAAK,IAJN,2CAAH,qDAOf,OACI,sBAAKgB,UAAU,iBAAf,UACI,sBAAKA,UAAU,cAAf,UACI,+CAAkBV,KACjBlC,EAAOW,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CAA0BA,MAAOA,EAAOkC,eAAgBA,GAAxClC,EAAMG,UAG9B,qBAAK6B,UAAU,YAAf,SACKK,GAAeA,EAAYE,kBChB7BC,EAXH,WACR,OACI,qBAAK9C,MAAM,YAAX,SACI,sBAAKA,MAAM,MAAX,UACI,cAAC,EAAD,IACA,cAAC,EAAD,UCED+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCECQ,EATK,WAAmC,IAAlC3D,EAAiC,uDAAzB,aAAc4D,EAAW,uCAClD,OAAOA,EAAOrE,MACV,IAAK,MACD,OAAOqE,EAAOpE,QAClB,QACI,OAAOQ,ICEJ6D,EAJKC,YAAgB,CAChC7D,WAAY0D,ICKVI,EAAQC,YACVC,EACAC,OAAOC,8BAAgCD,OAAOC,gCAGlDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1BtB,K","file":"static/js/main.78fb31bb.chunk.js","sourcesContent":["export const setDate = (value) => {\r\n    return {\r\n        type: 'SET',\r\n        payload: value\r\n    };\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setDate } from \"./../actions\";\r\nimport './../App.css';\r\n\r\nconst CallendarCard = ({day, month, year, events}) => {\r\n    const chosenDate = useSelector(state => state.chosenDate);\r\n    const dispatch = useDispatch();\r\n\r\n    const callendarCardClicked = () => {\r\n        console.log(\"Clicked on day: \" + day);\r\n        dispatch(setDate(`${year}-${month}-${day}`));\r\n    }\r\n\r\n    return(\r\n        <div class=\"calendar__day\" tabindex=\"0\" onClick={callendarCardClicked}>\r\n            <div class=\"day__events\">\r\n                {events.map(event => (\r\n                    <p key={event.id}>\r\n                        {event.short_name.toUpperCase()}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            <div class=\"day__number\">{day}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CallendarCard;","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport CallendarCard from \"./CallendarCard\";\r\nimport AddEventPanel from \"./AddEventPanel\";\r\nimport \"./../App.css\"\r\nimport { setDate } from \"../actions\";\r\n\r\nconst Callendar = () => {\r\n    const API_URL = `https://aleksanderblaszkiewicz.pl/kiedykolos/get_events.php`;\r\n    const [events, setEvents] = useState([]);\r\n    const [days, setDays] = useState([]);\r\n    const [month, setMonth] = useState(12);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        initializeDays();\r\n        getEvents();\r\n        dispatch(setDate(\"2020-12-01\"));\r\n    }, []);\r\n\r\n    const getEvents = async () => {\r\n        const response = await fetch(API_URL);\r\n        const data = await response.json();\r\n        setEvents(data);\r\n        console.log(data);\r\n    }\r\n\r\n    const initializeDays = () => {\r\n        let days = new Array(42);\r\n        for(let i=0; i<42; i++) {\r\n            days[i] = i+1;\r\n        }\r\n        setDays(days);\r\n    }\r\n\r\n    const getEventsForDay = (day) => {\r\n        let specificEvents = [];\r\n        events.forEach(event => {\r\n            if(event.date.slice(event.date.length-2,event.date.length) == day) {\r\n                specificEvents.push(event);\r\n            }\r\n        });\r\n        return specificEvents;\r\n    }\r\n\r\n    var groupSize = 7;\r\n    var rows = days.map(function(day) {\r\n        // map content to html elements\r\n        return <CallendarCard key={day} day={day} month={month} year=\"2020\" events={getEventsForDay(day)}/>;\r\n    }).reduce(function(r, element, index) {\r\n        // create element groups with size 3, result looks like:\r\n        // [[elem1, elem2, elem3], [elem4, elem5, elem6], ...]\r\n        index % groupSize === 0 && r.push([]);\r\n        r[r.length - 1].push(element);\r\n        return r;\r\n    }, []).map(function(rowContent) {\r\n        // surround every group with 'row'\r\n        return <div className=\"calendar__row\">{rowContent}</div>;\r\n    });\r\n\r\n    return (\r\n        <div className=\"app__calendar\">\r\n            {/* <AddEventPanel refreshEvents={getEvents}/> */}\r\n            <div className=\"calendar__month\">\r\n                <button className=\"month__button\">&lt;</button>\r\n                <h2 className=\"month__title\">Listopad</h2>\r\n                <button className=\"month__button\">&gt;</button>\r\n            </div>\r\n            <div className=\"calendar__names\">\r\n                <ul>\r\n                <li>poniedziałek</li>\r\n                <li>wtorek</li>\r\n                <li>środa</li>\r\n                <li>czwartek</li>\r\n                <li>piątek</li>\r\n                <li>sobota</li>\r\n                <li>niedziela</li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"calendar__days\">\r\n                    {rows}\r\n                    {/* {days.map(day => (\r\n                        <CallendarCard key={day} day={day} month={month} year=\"2020\" events={getEventsForDay(day)}/>\r\n                    ))} */}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Callendar;","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport './../App.css';\r\n\r\n\r\n\r\nconst InfoPanel = () => {\r\n    const [events, setEvents] = useState([]);\r\n    const [chosenEvent, setChosenEvent] = useState();\r\n    const date = useSelector(state => state.chosenDate);\r\n    const API_URL = `https://aleksanderblaszkiewicz.pl/kiedykolos/get_events_for_day.php?date=${date}`;\r\n\r\n    useEffect(() => {\r\n        getEvents();\r\n    }, [date]);\r\n\r\n    const getEvents = async () => {\r\n        const response = await fetch(API_URL);\r\n        const data = await response.json();\r\n        setEvents(data);\r\n        setChosenEvent(data[0]);\r\n    }\r\n\r\n    return(\r\n        <div className=\"app__extension\">\r\n            <div className=\"app__events\">\r\n                <p>Wybrana data: {date}</p>\r\n                {events.map((event) => (\r\n                    <InfoEvent key={event.id} event={event} setChosenEvent={setChosenEvent}/>\r\n                ))}\r\n            </div>\r\n            <div className=\"app__info\">\r\n                {chosenEvent && chosenEvent.description}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst InfoEvent = ({event, setChosenEvent}) => {\r\n    return (\r\n        <div className=\"info-event\" onClick={() => setChosenEvent(event)}>\r\n            <p>WYDARZENIE: {event.name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoPanel;","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Callendar from \"./components/Callendar\";\nimport InfoPanel from \"./components/InfoPanel\"\n\nconst App = () => {\n    return  (\n        <div class=\"container\">\n            <div class=\"app\">\n                <Callendar />\n                <InfoPanel />\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const dateReducer = (state = \"2020-11-01\", action) => {\r\n    switch(action.type) {\r\n        case 'SET':\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dateReducer;","import dateReducer from './chosenDate';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    chosenDate: dateReducer\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport allReducer from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    allReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}